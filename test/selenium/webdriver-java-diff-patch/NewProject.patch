--- ./NewProject.java	2013-02-15 15:47:10.000000000 +0100
+++ /Users/mariandebonis/Documents/workspace/Selenium-Ares-TestSuite/src/AresTestSuite/NewProject.java	2013-02-14 17:09:37.000000000 +0100
@@ -1,113 +1,191 @@
-package com.example.tests;
+package AresTestSuite;
 
-import java.util.regex.Pattern;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+import java.io.File;
+import java.io.IOException;
 import java.util.concurrent.TimeUnit;
-import org.junit.*;
-import static org.junit.Assert.*;
-import static org.hamcrest.CoreMatchers.*;
-import org.openqa.selenium.*;
-import org.openqa.selenium.firefox.FirefoxDriver;
-import org.openqa.selenium.support.ui.Select;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.Keys;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.chrome.ChromeDriverService;
+import org.openqa.selenium.ie.InternetExplorerDriver;
+import org.openqa.selenium.interactions.Actions;
+import org.openqa.selenium.remote.DesiredCapabilities;
+import org.openqa.selenium.remote.RemoteWebDriver;
+import org.testng.annotations.AfterClass;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
 
 public class NewProject {
-  private WebDriver driver;
-  private String baseUrl;
-  private boolean acceptNextAlert = true;
-  private StringBuffer verificationErrors = new StringBuffer();
-
-  @Before
-  public void setUp() throws Exception {
-    driver = new FirefoxDriver();
-    baseUrl = "http://127.0.0.1:9009/";
-    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
-  }
-
-  @Test
-  public void testNewProject() throws Exception {
-    driver.get(baseUrl + "/ide/ares/test.html?debug=true&norunner=true");
-    // Warning: verifyTextPresent may require manual changes
-    try {
-      assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*Ares[\\s\\S]*$"));
-    } catch (Error e) {
-      verificationErrors.append(e.toString());
-    }
-    assertEquals("Ares", driver.getTitle());
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectList_iconButton2 | ]]
-    // Warning: verifyTextPresent may require manual changes
-    try {
-      assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*Ares Test - Home Directory[\\s\\S]*$"));
-    } catch (Error e) {
-      verificationErrors.append(e.toString());
-    }
-    // Warning: assertTextPresent may require manual changes
-    assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*Ares Test - Home Directory[\\s\\S]*$"));
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectWizardCreate_selectDirectoryPopup_providerList_name | ]]
-    // Warning: assertTextPresent may require manual changes
-    assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*root[\\s\\S]*$"));
-    // Warning: assertTextPresent may require manual changes
-    assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*NewProject[\\s\\S]*$"));
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectWizardCreate_selectDirectoryPopup_hermesFileTree_serverNode_$NewProject_caption | ]]
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectWizardCreate_selectDirectoryPopup_confirm | ]]
-    for (int second = 0;; second++) {
-    	if (second >= 60) fail("timeout");
-    	try { if ("".equals(driver.findElement(By.id("ares_projectView_projectWizardCreate_propertiesWidget_projectTitle")).getText())) break; } catch (Exception e) {}
-    	Thread.sleep(1000);
-    }
-
-    driver.findElement(By.id("ares_projectView_projectWizardCreate_propertiesWidget_projectTitle")).clear();
-    driver.findElement(By.id("ares_projectView_projectWizardCreate_propertiesWidget_projectTitle")).sendKeys("projectForSelenumTest");
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectWizardCreate_propertiesWidget_ok | ]]
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectList_projectList_ownerProxy_item | ]]
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_harmonia_hermesFileTree_serverNode_caption | ]]
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_harmonia_hermesFileTree_serverNode_caption | ]]
-    for (int second = 0;; second++) {
-    	if (second >= 60) fail("timeout");
-    	try { if ("".equals(driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_newFileButton")).getText())) break; } catch (Exception e) {}
-    	Thread.sleep(1000);
-    }
-
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_harmonia_hermesFileTree_newFileButton | ]]
-    try {
-      assertEquals("", driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName")).getAttribute("value"));
-    } catch (Error e) {
-      verificationErrors.append(e.toString());
-    }
-    driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName")).clear();
-    driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName")).sendKeys("App1.js");
-    // ERROR: Caught exception [ERROR: Unsupported command [keyPress | id=ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName | s]]
-    // ERROR: Caught exception [ERROR: Unsupported command [keyUp | id=ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName | s]]
-    // ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_harmonia_hermesFileTree_nameFilePopup_confirmButton | ]]
-  }
-
-  @After
-  public void tearDown() throws Exception {
-    driver.quit();
-    String verificationErrorString = verificationErrors.toString();
-    if (!"".equals(verificationErrorString)) {
-      fail(verificationErrorString);
-    }
-  }
-
-  private boolean isElementPresent(By by) {
-    try {
-      driver.findElement(by);
-      return true;
-    } catch (NoSuchElementException e) {
-      return false;
-    }
-  }
-
-  private String closeAlertAndGetItsText() {
-    try {
-      Alert alert = driver.switchTo().alert();
-      if (acceptNextAlert) {
-        alert.accept();
-      } else {
-        alert.dismiss();
-      }
-      return alert.getText();
-    } finally {
-      acceptNextAlert = true;
-    }
-  }
+	
+	private static String OS = System.getProperty("os.name").toLowerCase();
+	private static ChromeDriverService service;
+	private static WebDriver driver;
+	private static String baseUrl = null;
+	private WebElement element = null;
+	private static StringBuffer verificationErrors = new StringBuffer();
+	private Actions action = null;
+
+	@SuppressWarnings("deprecation")
+	@BeforeClass (description="Driver start and Server start which creates a service that manage the driver server.")
+	public static void StartDriver() throws IOException {
+		// IE on Windows only
+		if ( isWindows() ) {
+			File file = new File("C:\\Users\\marian\\Downloads\\IEDriverServer_x64_2.29.1\\IEDriverServer.exe");
+			System.setProperty("webdriver.ie.driver", file.getAbsolutePath());	
+			DesiredCapabilities capabilities = DesiredCapabilities.internetExplorer();
+			capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true); 
+			driver = new InternetExplorerDriver(capabilities);
+			driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
+			
+		} else {
+			// createAndStartService
+			service = new ChromeDriverService.Builder()
+			.usingChromeDriverExecutable(new File("/usr/local/bin/chromedriver"))
+			.usingAnyFreePort()
+			.build();
+			service.start();
+			// createDriver
+			driver = new RemoteWebDriver(service.getUrl(),
+					DesiredCapabilities.chrome());
+		}	
+	}
+	@AfterClass (description="Driver quit and Server stop")
+	public static void StopDriver() throws InterruptedException {
+		driver.quit();
+		String verificationErrorString = verificationErrors.toString();
+		if (!"".equals(verificationErrorString)) {
+			fail(verificationErrorString);
+		}
+		if ( isMac() ) {
+			service.stop();
+		}
+	}
+	@Test (description="Get Ares URL; http://127.0.0.1:9009/ide/ares/test.html?debug=true&norunner=true")
+	public static void testGetAresUrl() throws IOException {
+		baseUrl = "http://127.0.0.1:9009/";
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.get(baseUrl + "ide/ares/test.html?debug=true&norunner=true");
+		try {
+			assertTrue(driver.findElement(By.cssSelector("BODY")).getText()
+					.matches("^[\\s\\S]*Ares[\\s\\S]*$"));
+		} catch (Error e) {
+			verificationErrors.append(e.toString());
+		}
+		assertEquals("Ares", driver.getTitle());		
+	}
+	@Test (description="Create a New Project, List this new project into the project list, expand it into the hermesFileTree")
+	public void testNewProject() throws Exception {
+		// ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectList_iconButton2 | ]]
+		if ((element = getObject(".//*[@id='ares_projectView_projectList_iconButton2']")) != null) {
+			element.click();
+			try {
+				// Assert Text is Present - Ares Test - Home Directory
+				assertTrue(driver.findElement(By.cssSelector("BODY")).getText()
+						.matches("^[\\s\\S]*Ares Test - Home Directory[\\s\\S]*$"));
+			} catch (Error e) {
+				verificationErrors.append(e.toString());
+			}
+			Thread.sleep(1000);
+		}				
+		// ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectWizardCreate_selectDirectoryPopup_providerList_name | ]]
+		if ((element = getObject(".//*[@id='ares_projectView_projectWizardCreate_selectDirectoryPopup_providerList_name']")) != null) {
+			element.click();
+			Thread.sleep(1000);
+			// Assert Text is Present 
+			assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*root[\\s\\S]*$"));
+			// Assert Text is Present 
+			assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*NewProject[\\s\\S]*$"));
+			Thread.sleep(1000);
+		}		
+		// ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectWizardCreate_selectDirectoryPopup_hermesFileTree_serverNode_$NewProject_caption | ]]
+		if ((element = getObject(".//*[@id='ares_projectView_projectWizardCreate_selectDirectoryPopup_hermesFileTree_serverNode_$NewProject_caption']")) != null) {
+			element.click();
+			Thread.sleep(1000);
+			// ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectWizardCreate_selectDirectoryPopup_confirm | ]]
+			if ((element = getObject(".//*[@id='ares_projectView_projectWizardCreate_selectDirectoryPopup_confirm']")) != null) {
+				element.click();
+				for (int second = 0;; second++) {
+					if (second >= 60) fail("timeout");
+					// wait for text projectTitle available into widget ares_projectView_projectWizardCreate_propertiesWidget
+					try { if ("".equals(driver.findElement(By.id("ares_projectView_projectWizardCreate_propertiesWidget_projectTitle")).getText())) break; } catch (Exception e) {}
+					Thread.sleep(1000);
+				}	
+			}
+			
+			driver.findElement(By.id("ares_projectView_projectWizardCreate_propertiesWidget_projectTitle")).clear();
+			driver.findElement(By.id("ares_projectView_projectWizardCreate_propertiesWidget_projectTitle")).sendKeys("projectForSelenumTest");
+			
+		}	
+		// ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectWizardCreate_propertiesWidget_ok | ]]
+		if ((element = getObject(".//*[@id='ares_projectView_projectWizardCreate_propertiesWidget_ok']")) != null) {
+			element.click();
+			// ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_projectList_projectList_ownerProxy_item | ]]
+			// as result, the NewProject is expanded into hermesFileTree
+			if ((element = getObject(".//*[@id='ares_projectView_projectList_projectList_ownerProxy_item']")) != null) {
+				element.click();
+				for (int second = 0;; second++) {
+					if (second >= 60) fail("timeout");
+					try { 
+							if ("NewProject".equals(driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_serverNode_caption")).getText())) break; 
+					} catch (Exception e) {}
+					Thread.sleep(1000);
+				}
+				if ((element = getObject(".//*[@id='ares_projectView_harmonia_hermesFileTree_serverNode_caption']")) != null) {
+					element.click();
+				}
+			}
+			// ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_harmonia_hermesFileTree_newFileButton | ]]
+			if ((element = getObject(".//*[@id='ares_projectView_harmonia_hermesFileTree_newFileButton']")) != null) {
+				element.click();
+				try {
+					assertEquals("", driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName")).getAttribute("value"));
+				} catch (Error e) {
+					verificationErrors.append(e.toString());
+				}
+				
+				driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName")).clear();
+				driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName")).sendKeys("App1.js");
+
+				// ERROR: Caught exception [ERROR: Unsupported command [keyPress | id=ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName | s]]
+				// ERROR: Caught exception [ERROR: Unsupported command [keyUp | id=ares_projectView_harmonia_hermesFileTree_nameFilePopup_fileName | s]]
+				action = new Actions(driver);
+				if ( isWindows() ) {
+					action.keyDown(Keys.CONTROL).keyUp(Keys.CONTROL).perform();
+				} else {
+					action.keyDown(Keys.CONTROL).sendKeys("s").keyUp(Keys.CONTROL).perform();
+				}
+			}					
+			// ERROR: Caught exception [ERROR: Unsupported command [clickAt | id=ares_projectView_harmonia_hermesFileTree_nameFilePopup_confirmButton | ]]
+			if ((element = getObject(".//*[@id='ares_projectView_harmonia_hermesFileTree_nameFilePopup_confirmButton']")) != null) {
+				element.click();
+				Thread.sleep(1000);
+				driver.findElement(By.id("ares_projectView_harmonia_hermesFileTree_serverNode_caption")).click();
+				Thread.sleep(1000);
+			}	
+		}		
+	}
+	public WebElement getObject(String xpathKey) {
+		WebElement elt = null;
+		try {
+			elt = driver.findElement(By.xpath(xpathKey));
+			System.out.println(elt);
+			return elt;
+		} catch (Throwable t) {
+			System.out.println("Cannot find object with key--" + xpathKey);
+			return null;
+
+		}
+	}
+	public static boolean isWindows() {	 
+		return (OS.indexOf("win") >= 0);
+	}
+	public static boolean isMac() {
+		return (OS.indexOf("mac") >= 0);
+	}
 }
